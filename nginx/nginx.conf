events {
    worker_connections 1024;
}
    
http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    # Define an upstream for the client service
    upstream client_service {
        server client:80; # 'client' is the service name in docker-compose, 80 is its internal port
    }
   
    # Define an upstream for the server service (for Socket.IO)
    upstream server_service {
        server server:4000; # 'server' is the service name in docker-compose, 4000 is its internal port
    }
   
    server {
        listen 80;
        listen [::]:80;
        server_name codenow.rj-tw.com;

        location / {
            proxy_pass http://client_service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
  
        location /socket.io/ {
            proxy_pass http://server_service/socket.io/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
     }
  }